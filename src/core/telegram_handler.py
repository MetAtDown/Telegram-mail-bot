import telebot
from telebot import types
import threading
import time
import queue
import functools
import gc
from src.core.summarization import SummarizationManager
from typing import Dict, List
from src.core.email_handler import EmailTelegramForwarder
from src.config import settings
from src.utils.logger import get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
logger = get_logger("telegram_bot")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ get_logger –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ DEBUG –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, INFO –¥–ª—è –ø—Ä–æ–¥–∞

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
RETRY_DELAY = 2  # —Å–µ–∫—É–Ω–¥—ã
RECONNECT_DELAY = 5  # —Å–µ–∫—É–Ω–¥—ã
MAX_MESSAGE_QUEUE = 100
CACHE_REFRESH_INTERVAL = 300  # —Å–µ–∫—É–Ω–¥—ã (5 –º–∏–Ω—É—Ç)
DELIVERY_MODE_TEXT = 'text'
DELIVERY_MODE_HTML = 'html'
DELIVERY_MODE_SMART = 'smart'
DELIVERY_MODE_PDF = 'pdf'
DEFAULT_DELIVERY_MODE = DELIVERY_MODE_SMART


# --- –ü–†–ï–§–ò–ö–°–´ –î–õ–Ø –ö–ê–°–¢–û–ú–ù–´–• CALLBACK_DATA ---
REPORT_CONFIG_PREFIX = "rcfgidx_"  # Report Config by Index
SUBJECT_MODE_PREFIX = "smode_"  # Subject Mode
# –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
SUBJECT_SUMMARY_PREFIX = "ssum_"  # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
SUBJECT_ORIG_PREFIX = "sorig_"  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤–º–µ—Å—Ç–µ —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
CLOSE_REPORTS_PREFIX = "close_reports"




def with_retry(max_attempts: int = MAX_RETRIES, delay: int = RETRY_DELAY):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_attempts - 1:
                        wait_time = delay * (2 ** attempt)
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): "
                            f"{e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å"
                        )
                        time.sleep(wait_time)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
            if last_exception:  # –î–æ–±–∞–≤–ª–µ–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ UnboundLocalError –µ—Å–ª–∏ max_attempts = 0 –∏–ª–∏ 1
                raise last_exception
            return None  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —á—Ç–æ-—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

        return wrapper

    return decorator


class EmailBotHandler:
    def __init__(self, db_manager=None):
        self.telegram_token = settings.TELEGRAM_TOKEN
        if not self.telegram_token:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

        if db_manager is None:
            from src.db.manager import DatabaseManager
            self.db_manager = DatabaseManager()
        else:
            self.db_manager = db_manager

        self.lock = threading.RLock()
        self.stop_event = threading.Event()
        self.message_queue = queue.Queue(maxsize=MAX_MESSAGE_QUEUE)


        self.client_data = {}
        self.client_data_timestamp = 0
        self.user_states = {}
        self.user_states_timestamp = 0

        self.message_report_context_cache: Dict[
            int, List[tuple[str, str]]] = {}  # message_id -> list of (subject, mode)
        self.MAX_CONTEXT_CACHE_SIZE = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        self.last_activity = {}
        self.running = False
        self.polling_thread = None
        self.message_thread = None
        self.bot = self._initialize_bot()
        self.register_handlers()
        self.reload_client_data()

    def _initialize_bot(self) -> telebot.TeleBot:
        try:
            bot = telebot.TeleBot(
                self.telegram_token,
                threaded=False,
                #num_threads=4, –ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–• –£–¢–ï–ß–ö–ê –ò–ó –ó–ê –≠–¢–û–ô –¢–ï–ú–´ PIZDEC –ö–õ–ê–£–î –Ø –¢–ï–ë–Ø –ù–ï–ù–ê–í–ò–ñ–£
                parse_mode="Markdown"  # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è send_message, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
            )
            logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return bot
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise

    def _clear_cache_for_subject(self, chat_id: str, subject: str) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f'subject_summarization_settings_{chat_id}_{subject}'
        self.db_manager._clear_cache(cache_key)

        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        cache_key_status = f'subject_summarization_status_{chat_id}_{subject}'
        self.db_manager._clear_cache(cache_key_status)

    def reload_client_data(self) -> None:
        current_time = time.time()
        logger.debug("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        if (current_time - self.user_states_timestamp) < CACHE_REFRESH_INTERVAL and self.user_states:
            logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        try:
            with self.lock:
                self.user_states = self.db_manager.get_all_users()
                self.user_states_timestamp = current_time
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è {len(self.user_states)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            if not self.user_states:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à –ø—É—Å—Ç.")
            else:
                logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.")

    @with_retry()
    def update_client_status(self, chat_id: str, status: bool) -> bool:
        try:
            result = self.db_manager.update_user_status(chat_id, status)
            if result:
                with self.lock:
                    self.user_states[str(chat_id)] = status  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chat_id - —Å—Ç—Ä–æ–∫–∞
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è chat_id {chat_id}: {'Enable' if status else 'Disable'}")
                return True
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è chat_id {chat_id}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}: {e}")
            raise

    def get_main_menu_keyboard(self) -> types.ReplyKeyboardMarkup:
        if hasattr(self, '_main_menu_keyboard_cached'):
            return self._main_menu_keyboard_cached

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton('üìä –°—Ç–∞—Ç—É—Å'), types.KeyboardButton('üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã'))
        markup.add(types.KeyboardButton('‚úÖ –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'), types.KeyboardButton('‚ùå –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        markup.add(types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        self._main_menu_keyboard_cached = markup
        return markup

    def get_subject_delivery_mode_keyboard(self, original_message_id: int, report_index: int,
                                           current_mode: str) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
        Callback_data: "smode_<original_message_id>_<report_index>_<mode_code>"
        """
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        logger.debug(
            f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è original_msg_id={original_message_id}, rpt_idx={report_index}, current_mode='{current_mode}'")

        def get_button_text(mode_code: str, text: str) -> str:
            return f"‚úÖ {text}" if mode_code == current_mode else text

        modes = [
            (DELIVERY_MODE_SMART, "–ê–≤—Ç–æ (–¢–µ–∫—Å—Ç / PDF)"),
            (DELIVERY_MODE_TEXT, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"),
            (DELIVERY_MODE_HTML, "–¢–æ–ª—å–∫–æ HTML —Ñ–∞–π–ª"),
            (DELIVERY_MODE_PDF, "–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª"),
        ]

        for mode_code, mode_text in modes:
            callback_data_str = f"{SUBJECT_MODE_PREFIX}{original_message_id}_{report_index}_{mode_code}"
            logger.debug(f"Callback –¥–ª—è —Ä–µ–∂–∏–º–∞ '{mode_code}': {callback_data_str} (–¥–ª–∏–Ω–∞ {len(callback_data_str)})")
            if len(callback_data_str) > 64:
                logger.warning(f"–î–ª–∏–Ω–∞ callback_data '{callback_data_str}' –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 –±–∞–π—Ç–∞!")

            keyboard.add(types.InlineKeyboardButton(
                get_button_text(mode_code, mode_text),
                callback_data=callback_data_str
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—Ç—á–µ—Ç–∞"
        back_button = types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—Ç—á–µ—Ç–∞",
            callback_data=f"{REPORT_CONFIG_PREFIX}{report_index}"
        )
        keyboard.add(back_button)

        return keyboard

    def get_status_message(self, chat_id: str, user_name: str) -> str:
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {chat_id} ({user_name})")
        try:
            is_registered = self.db_manager.is_user_registered(chat_id)
            if not is_registered:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                return (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–í–∞—à Chat ID: `{chat_id}`\n\n"
                        "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

            is_enabled = self.db_manager.get_user_status(chat_id)
            subjects_info = self.db_manager.get_user_subjects(chat_id)
            subjects_count = len(subjects_info) if subjects_info else 0
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            reports_text = f"–£ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {subjects_count} —à—Ç." if subjects_count > 0 else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."

            return (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–í–∞—à Chat ID: `{chat_id}`\n\n"
                    f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ: *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω*\n"
                    f"–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{status_text.upper()}*\n\n"
                    f"{reports_text}\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reports –∏–ª–∏ –∫–Ω–æ–ø–∫—É 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã'.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è {chat_id}: {e}", exc_info=True)
            return (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–í–∞—à Chat ID: `{chat_id}`\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    def _clear_old_context_cache_entries(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç."""
        with self.lock:  # –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
            if len(self.message_report_context_cache) > self.MAX_CONTEXT_CACHE_SIZE:
                num_to_remove = len(self.message_report_context_cache) - self.MAX_CONTEXT_CACHE_SIZE
                keys_to_remove = list(self.message_report_context_cache.keys())[:num_to_remove]
                for key in keys_to_remove:
                    del self.message_report_context_cache[key]
                    logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è message_id {key} (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç).")
                logger.info(
                    f"–û—á–∏—â–µ–Ω–æ {num_to_remove} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self.message_report_context_cache)}")

    def register_handlers(self) -> None:
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            chat_id = str(message.chat.id)
            user_name = message.from_user.first_name
            welcome_message = (
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–í–∞—à Chat ID: `{chat_id}`\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–∏—Å—å–º–∞ –∏–∑ –ø–æ—á—Ç—ã –≤ Telegram –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            self._queue_message(chat_id, welcome_message, reply_markup=self.get_main_menu_keyboard())
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} ({user_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        @self.bot.message_handler(commands=['status'])
        def handle_status(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            chat_id = str(message.chat.id)
            user_name = message.from_user.first_name
            status_message = self.get_status_message(chat_id, user_name)
            self._queue_message(chat_id, status_message, parse_mode='Markdown')  # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ Markdown –ø–∞—Ä—Å–∏—Ç—Å—è
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} ({user_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å")

        @self.bot.message_handler(commands=['reports'])
        def handle_show_reports(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            chat_id = str(message.chat.id)
            user_name = message.from_user.first_name
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} ({user_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ (/reports)")

            try:
                subjects_with_modes = self.db_manager.get_user_subjects(chat_id)
                if not subjects_with_modes:
                    self._queue_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n"
                                                 "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    return

                title_part = EmailTelegramForwarder.escape_markdown_v2("üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
                response_text = title_part + "\n\n"
                mode_display_map = {
                    DELIVERY_MODE_TEXT: "–¢–µ–∫—Å—Ç", DELIVERY_MODE_HTML: "HTML",
                    DELIVERY_MODE_PDF: "PDF", DELIVERY_MODE_SMART: "–ê–≤—Ç–æ (–¢–µ–∫—Å—Ç/PDF)"}
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
                summarization_manager = SummarizationManager()
                subjects_with_summary = {}
                
                for subject, _ in subjects_with_modes:
                    subjects_with_summary[subject] = summarization_manager.get_report_summarization_status(chat_id, subject)

                for index, (subject, mode) in enumerate(subjects_with_modes):
                    safe_subject_content = EmailTelegramForwarder.escape_markdown_v2(subject)
                    subject_line = f"‚ñ™Ô∏è *{safe_subject_content}*"
                    mode_text_display = mode_display_map.get(mode, mode.capitalize())
                    mode_prefix_escaped = EmailTelegramForwarder.escape_markdown_v2("- –†–µ–∂–∏–º:")
                    mode_line = f"   {mode_prefix_escaped} `{mode_text_display}`"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    summary_status = subjects_with_summary.get(subject, False)
                    summary_prefix_escaped = EmailTelegramForwarder.escape_markdown_v2("- –°–∞–º–º–∞—Ä–∏:")
                    summary_line = f"   {summary_prefix_escaped} `{'‚úÖ' if summary_status else '‚ùå'}`"
                    
                    response_text += f"{subject_line}\n{mode_line}\n{summary_line}\n\n"

                    button_text_subject = f"{subject[:35]}{'...' if len(subject) > 35 else ''}"  # –ù–µ–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏

                    callback_data_str = f"{REPORT_CONFIG_PREFIX}{index}"
                    logger.debug(
                        f"–î–ª—è –æ—Ç—á–µ—Ç–∞ '{subject}' (–∏–Ω–¥–µ–∫—Å {index}) callback_data='{callback_data_str}' (–¥–ª–∏–Ω–∞ {len(callback_data_str)})")
                    if len(callback_data_str) > 64:
                        logger.warning(f"–î–ª–∏–Ω–∞ callback_data '{callback_data_str}' –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 –±–∞–π—Ç–∞!")

                    button = types.InlineKeyboardButton(
                        f"‚öôÔ∏è {button_text_subject}",
                        callback_data=callback_data_str
                    )
                    keyboard.add(button)

                explanation_part = EmailTelegramForwarder.escape_markdown_v2(
                    "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
                response_text += explanation_part

                button_close = types.InlineKeyboardButton(
                    "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data=CLOSE_REPORTS_PREFIX
                )
                keyboard.add(button_close)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å message_id –¥–ª—è –∫—ç—à–∞
                try:
                    sent_message = self.bot.send_message(
                        chat_id, response_text, reply_markup=keyboard, parse_mode='MarkdownV2')

                    # –ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ subjects_with_modes –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    with self.lock:  # –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
                        self.message_report_context_cache[sent_message.message_id] = list(subjects_with_modes)
                    logger.info(
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ /reports (ID: {sent_message.message_id}) —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                    self._clear_old_context_cache_entries()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                except Exception as send_ex:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ /reports –¥–ª—è {chat_id}: {send_ex}", exc_info=True)
                    self._queue_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤.")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_show_reports –¥–ª—è {chat_id}: {e}", exc_info=True)
                self._queue_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤.")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith(REPORT_CONFIG_PREFIX))
        def handle_report_config_callback(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)
            original_message_id = call.message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å"

            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback '{call.data}' –æ—Ç {chat_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {original_message_id}")

            try:
                mode_display_map = {
                    DELIVERY_MODE_TEXT: "–¢–µ–∫—Å—Ç",
                    DELIVERY_MODE_HTML: "HTML",
                    DELIVERY_MODE_PDF: "PDF",
                    DELIVERY_MODE_SMART: "–ê–≤—Ç–æ (–¢–µ–∫—Å—Ç/PDF)"
                }
                report_index_str = call.data.replace(REPORT_CONFIG_PREFIX, "")
                if not report_index_str.isdigit():
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ callback_data: '{call.data}'")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
                    return
                report_index = int(report_index_str)

                with self.lock:  # –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
                    cached_reports_list = self.message_report_context_cache.get(original_message_id)

                if cached_reports_list is None:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è msg_id {original_message_id} (—á–∞—Ç {chat_id}).")
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /reports —Å–Ω–æ–≤–∞.",
                                                   show_alert=True)
                    try:
                        self.bot.edit_message_reply_markup(chat_id, original_message_id)
                    except Exception:
                        pass
                    return

                if not (0 <= report_index < len(cached_reports_list)):
                    logger.warning(
                        f"–ò–Ω–¥–µ–∫—Å {report_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∫—ç—à–∞ (–¥–ª–∏–Ω–∞ {len(cached_reports_list)}) msg_id {original_message_id}.")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return

                subject_to_configure, current_mode = cached_reports_list[report_index]
                logger.info(
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–∞ '{subject_to_configure}' (–∏–Ω–¥–µ–∫—Å {report_index}), —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                summarization_manager = SummarizationManager()
                summary_enabled = summarization_manager.get_report_summarization_status(chat_id, subject_to_configure)

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–Ω—ã –¥–ª—è —Ñ–ª–∞–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
                user_settings = self.db_manager.get_user_summarization_settings(chat_id)
                allow_summarization_control = user_settings.get('allow_summarization', False)
                subject_settings = self.db_manager.get_subject_summarization_settings(chat_id, subject_to_configure)
                send_original = subject_settings.get('send_original', True)


                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                delivery_settings = self.db_manager.get_user_delivery_settings(chat_id)
                allow_delivery_mode_selection = delivery_settings.get('allow_delivery_mode_selection', False)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
                keyboard = types.InlineKeyboardMarkup(row_width=1)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
                if allow_delivery_mode_selection:
                    button_delivery_text = f"üîÑ –†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏: {mode_display_map.get(current_mode, current_mode.capitalize())}"
                    button_delivery = types.InlineKeyboardButton(
                        button_delivery_text,
                        callback_data=f"rcfg_delivery_{original_message_id}_{report_index}"
                    )
                    keyboard.add(button_delivery)

                # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if allow_summarization_control:
                    summary_status = "‚úÖ –í–∫–ª" if summary_enabled else "‚ùå –í—ã–∫–ª"
                    button_summary = types.InlineKeyboardButton(
                        f"üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {summary_status}",
                        callback_data=f"{SUBJECT_SUMMARY_PREFIX}{original_message_id}_{report_index}"
                    )
                    keyboard.add(button_summary)

                    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)
                    if summary_enabled:
                        button_original = types.InlineKeyboardButton(
                            f"üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {'‚úÖ –í–∫–ª' if send_original else '‚ùå –í—ã–∫–ª'}",
                            callback_data=f"{SUBJECT_ORIG_PREFIX}{original_message_id}_{report_index}"
                        )
                        keyboard.add(button_original)


                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
                button_back = types.InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤",
                    callback_data=f"back_to_reports"
                )
                keyboard.add(button_back)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                safe_subject_escaped = EmailTelegramForwarder.escape_markdown_v2(subject_to_configure)
                response_parts = [
                    EmailTelegramForwarder.escape_markdown_v2("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–∞:"),
                    f"`{safe_subject_escaped}`",
                    "*" + EmailTelegramForwarder.escape_markdown_v2("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:") + "*",
                    EmailTelegramForwarder.escape_markdown_v2(
                        f"‚Ä¢ –†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏: {mode_display_map.get(current_mode, current_mode.capitalize())}"),
                    EmailTelegramForwarder.escape_markdown_v2(
                        f"‚Ä¢ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if summary_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
                ]

                if summary_enabled:
                    response_parts.append(EmailTelegramForwarder.escape_markdown_v2(
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {'–í–∫–ª' if send_original else '–í—ã–∫–ª'}")
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
                notes = []
                if not allow_delivery_mode_selection:
                    notes.append("‚ö†Ô∏è –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                if not allow_summarization_control:
                    notes.append("‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

                if notes:
                    response_parts.append("\n" + EmailTelegramForwarder.escape_markdown_v2("\n".join(notes)))

                response_text = "\n\n".join(response_parts)

                try:
                    self.bot.edit_message_text(
                        response_text, chat_id, original_message_id,
                        reply_markup=keyboard, parse_mode='MarkdownV2')
                    self.bot.answer_callback_query(call.id)
                except telebot.apihelper.ApiTelegramException as api_ex:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {original_message_id} (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–∞): {api_ex}",
                        exc_info=True)
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reports —Å–Ω–æ–≤–∞.",
                                                   show_alert=True)
                except Exception as edit_e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {original_message_id} (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–∞): {edit_e}",
                        exc_info=True)
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reports —Å–Ω–æ–≤–∞.",
                                                   show_alert=True)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_report_config_callback ({call.data}): {e}", exc_info=True)
                try:
                    self.bot.answer_callback_query(call.id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
                except Exception:
                    pass

        @self.bot.callback_query_handler(func=lambda call: call.data == CLOSE_REPORTS_PREFIX)
        def handle_close_reports(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)
            message_id = call.message.message_id

            try:
                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="üìã –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ.",
                    reply_markup=None
                )
                self.bot.answer_callback_query(call.id, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
                with self.lock:
                    if message_id in self.message_report_context_cache:
                        del self.message_report_context_cache[message_id]
                        logger.info(f"–ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è.")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤: {e}", exc_info=True)
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith(SUBJECT_MODE_PREFIX))
        def handle_subject_mode_callback(call: types.CallbackQuery):
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)
            current_message_id_mode_selection = call.message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞

            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω callback '{call.data}' –æ—Ç {chat_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_id_mode_selection}")

            try:
                parts = call.data.replace(SUBJECT_MODE_PREFIX, "").split('_')
                if len(parts) != 3:  # original_msg_id, report_idx, new_mode
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞: '{call.data}'")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
                    return

                original_message_id_str, report_index_str, new_mode = parts
                if not (original_message_id_str.isdigit() and report_index_str.isdigit() and new_mode):
                    logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Å—Ç–µ–π callback_data: {parts}")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
                    return

                original_message_id = int(original_message_id_str)
                report_index = int(report_index_str)

                with self.lock:  # –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
                    cached_reports_list = self.message_report_context_cache.get(original_message_id)

                if cached_reports_list is None:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è original_msg_id {original_message_id} (—Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞).")
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /reports.", show_alert=True)
                    try:
                        self.bot.edit_message_text("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ —Å /reports.", chat_id,
                                                   current_message_id_mode_selection, reply_markup=None)
                    except Exception:
                        pass
                    return

                if not (0 <= report_index < len(cached_reports_list)):
                    logger.warning(
                        f"–ò–Ω–¥–µ–∫—Å {report_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∫—ç—à–∞ (–¥–ª–∏–Ω–∞ {len(cached_reports_list)}) original_msg_id {original_message_id}.")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return

                subject_to_update, old_mode_from_cache = cached_reports_list[report_index]
                logger.info(f"–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è '{subject_to_update}' –Ω–∞ '{new_mode}' (—Å—Ç–∞—Ä—ã–π: {old_mode_from_cache})")

                if new_mode == old_mode_from_cache:
                    self.bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º '{new_mode.capitalize()}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤, —á—Ç–æ —Ä–µ–∂–∏–º –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    return

                if self.db_manager.update_subject_delivery_mode(chat_id, subject_to_update, new_mode):
                    mode_display_map = {
                        DELIVERY_MODE_TEXT: "–¢–µ–∫—Å—Ç", DELIVERY_MODE_HTML: "HTML",
                        DELIVERY_MODE_PDF: "PDF", DELIVERY_MODE_SMART: "–ê–≤—Ç–æ (–¢–µ–∫—Å—Ç/PDF)"}
                    mode_text_display = mode_display_map.get(new_mode, new_mode.capitalize())
                    self.bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text_display}")

                    safe_subject_escaped = EmailTelegramForwarder.escape_markdown_v2(subject_to_update)
                    response_text_success = (
                        f"‚úÖ *–†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞:*\n`{safe_subject_escaped}`\n\n"
                        f"*–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:* `{EmailTelegramForwarder.escape_markdown_v2(mode_text_display)}`")
                    try:
                        self.bot.edit_message_text(
                            response_text_success, chat_id, current_message_id_mode_selection,
                            reply_markup=None, parse_mode='MarkdownV2')

                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —Ç–∞–∫ –∫–∞–∫ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω
                        with self.lock:
                            if original_message_id in self.message_report_context_cache:
                                cached_reports_list = self.message_report_context_cache[original_message_id]
                                if 0 <= report_index < len(cached_reports_list):
                                    subject, _ = cached_reports_list[report_index]  # –ë–µ—Ä–µ–º —Ç–µ–º—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º
                                    cached_reports_list[report_index] = (subject, new_mode)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ - –º–µ–Ω—è–µ–º call.data –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        call.data = f"{REPORT_CONFIG_PREFIX}{report_index}"
                        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        handle_report_config_callback(call)
                    except Exception as edit_ex:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {current_message_id_mode_selection} (—Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞): {edit_ex}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
                        self._queue_message(chat_id, response_text_success, parse_mode='MarkdownV2')

                    logger.info(f"–†–µ–∂–∏–º –¥–ª—è '{subject_to_update}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_mode}.")
                else:
                    self.bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≤ –ë–î.", show_alert=True)
                    logger.warning(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è '{subject_to_update}' –Ω–∞ {new_mode}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_subject_mode_callback ({call.data}): {e}", exc_info=True)
                try:
                    self.bot.answer_callback_query(call.id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
                except Exception:
                    pass

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("rcfg_delivery_"))
        def handle_delivery_mode_selection(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
                _, _, original_message_id, report_index = call.data.split('_')
                original_message_id = int(original_message_id)
                report_index = int(report_index)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_settings = self.db_manager.get_user_delivery_settings(chat_id)
                if not delivery_settings.get('allow_delivery_mode_selection', True):
                    self.bot.answer_callback_query(
                        call.id,
                        "–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        show_alert=True
                    )
                    return
                
                with self.lock:
                    cached_reports_list = self.message_report_context_cache.get(original_message_id)
                    
                if not cached_reports_list or report_index >= len(cached_reports_list):
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /reports —Å–Ω–æ–≤–∞.", show_alert=True)
                    return
                    
                subject, current_mode = cached_reports_list[report_index]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                mode_keyboard = self.get_subject_delivery_mode_keyboard(original_message_id, report_index, current_mode)
                
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞:\n\n`{subject}`",
                    chat_id, call.message.message_id,
                    reply_markup=mode_keyboard, parse_mode='Markdown'
                )
                self.bot.answer_callback_query(call.id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delivery_mode_selection: {e}", exc_info=True)
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

        @self.bot.callback_query_handler(func=lambda call: call.data == "dummy_action")
        def handle_dummy_action(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
            self.bot.answer_callback_query(
                call.id,
                "–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                show_alert=True
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith(SUBJECT_SUMMARY_PREFIX))
        def handle_summary_toggle(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                user_settings = self.db_manager.get_user_summarization_settings(chat_id)
                if not user_settings.get('allow_summarization', False):
                    self.bot.answer_callback_query(
                        call.id,
                        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        show_alert=True
                    )
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
                parts = call.data.replace(SUBJECT_SUMMARY_PREFIX, "").split('_')
                if len(parts) != 2:
                    self.bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

                original_message_id = int(parts[0])
                report_index = int(parts[1])

                with self.lock:
                    cached_reports_list = self.message_report_context_cache.get(original_message_id)

                if not cached_reports_list or report_index >= len(cached_reports_list):
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /reports —Å–Ω–æ–≤–∞.",
                                                   show_alert=True)
                    return

                subject, _ = cached_reports_list[report_index]

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
                summarization_manager = SummarizationManager()
                current_status = summarization_manager.get_report_summarization_status(chat_id, subject)
                new_status = not current_status

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                if summarization_manager.toggle_report_summarization(chat_id, subject, new_status):
                    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                    self.bot.answer_callback_query(call.id, f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {status_text}")

                    # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    # –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    self._clear_cache_for_subject(chat_id, subject)

                    callback_data = f"{REPORT_CONFIG_PREFIX}{report_index}"

                    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞
                    call.data = callback_data

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
                    handle_report_config_callback(call)
                else:
                    self.bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", show_alert=True)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_summary_toggle: {e}", exc_info=True)
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith(SUBJECT_ORIG_PREFIX))
        def handle_original_toggle(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                user_settings = self.db_manager.get_user_summarization_settings(chat_id)
                if not user_settings.get('allow_summarization', False):
                    self.bot.answer_callback_query(
                        call.id,
                        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        show_alert=True
                    )
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
                parts = call.data.replace(SUBJECT_ORIG_PREFIX, "").split('_')
                if len(parts) != 2:
                    self.bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

                original_message_id = int(parts[0])
                report_index = int(parts[1])

                with self.lock:
                    cached_reports_list = self.message_report_context_cache.get(original_message_id)

                if not cached_reports_list or report_index >= len(cached_reports_list):
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /reports —Å–Ω–æ–≤–∞.",
                                                   show_alert=True)
                    return

                subject, _ = cached_reports_list[report_index]

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
                subject_settings = self.db_manager.get_subject_summarization_settings(chat_id, subject)
                current_send_original = subject_settings.get('send_original', True)
                new_send_original = not current_send_original
                prompt_id = subject_settings.get('prompt_id')

                logger.info(
                    f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è {chat_id}, —Ç–µ–º–∞ '{subject}': {current_send_original} -> {new_send_original}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if self.db_manager.update_subject_summarization_settings(chat_id, subject, prompt_id,
                                                                         new_send_original):
                    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_send_original else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                    self.bot.answer_callback_query(call.id, f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ {status_text}")

                    # –Ø–≤–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à–∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    self._clear_cache_for_subject(chat_id, subject)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
                    with self.lock:
                        if hasattr(self, 'subject_settings_cache'):
                            cache_key = f'subject_summarization_settings_{chat_id}_{subject}'
                            if cache_key in self.subject_settings_cache:
                                self.subject_settings_cache[cache_key]['send_original'] = new_send_original

                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ö–æ—Ç–∏–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                    fresh_settings = self.db_manager.get_subject_summarization_settings(chat_id, subject)
                    actual_send_original = fresh_settings.get('send_original', True)
                    logger.info(f"–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {actual_send_original}")

                    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π call.data –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    call.data = f"{REPORT_CONFIG_PREFIX}{report_index}"

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    handle_report_config_callback(call)
                else:
                    self.bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", show_alert=True)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_original_toggle: {e}", exc_info=True)
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

        @self.bot.callback_query_handler(func=lambda call: call.data == "back_to_reports")
        def handle_back_to_reports(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤"""
            self._update_user_activity(call.message.chat.id)
            chat_id = str(call.message.chat.id)
            original_message_id = call.message.message_id

            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç {chat_id}, message_id: {original_message_id}")

            try:
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"
                self.bot.answer_callback_query(call.id)

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                subjects_with_modes = self.db_manager.get_user_subjects(chat_id)
                if not subjects_with_modes:
                    self.bot.edit_message_text(
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        chat_id, original_message_id
                    )
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –¢–û–ß–ù–û–°–¢–ò –∫–∞–∫ –≤ handle_show_reports
                title_part = EmailTelegramForwarder.escape_markdown_v2("üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
                response_text = title_part + "\n\n"

                mode_display_map = {
                    DELIVERY_MODE_TEXT: "–¢–µ–∫—Å—Ç",
                    DELIVERY_MODE_HTML: "HTML",
                    DELIVERY_MODE_PDF: "PDF",
                    DELIVERY_MODE_SMART: "–ê–≤—Ç–æ (–¢–µ–∫—Å—Ç/PDF)"
                }
                keyboard = types.InlineKeyboardMarkup(row_width=1)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
                summarization_manager = SummarizationManager()
                subjects_with_summary = {}

                for subject, _ in subjects_with_modes:
                    subjects_with_summary[subject] = summarization_manager.get_report_summarization_status(chat_id,
                                                                                                           subject)

                for index, (subject, mode) in enumerate(subjects_with_modes):
                    safe_subject_content = EmailTelegramForwarder.escape_markdown_v2(subject)
                    subject_line = f"‚ñ™Ô∏è *{safe_subject_content}*"
                    mode_text_display = mode_display_map.get(mode, mode.capitalize())
                    mode_prefix_escaped = EmailTelegramForwarder.escape_markdown_v2("- –†–µ–∂–∏–º:")
                    mode_line = f"   {mode_prefix_escaped} `{mode_text_display}`"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    summary_status = subjects_with_summary.get(subject, False)
                    summary_prefix_escaped = EmailTelegramForwarder.escape_markdown_v2("- –°–∞–º–º–∞—Ä–∏:")
                    summary_line = f"   {summary_prefix_escaped} `{'‚úÖ' if summary_status else '‚ùå'}`"

                    response_text += f"{subject_line}\n{mode_line}\n{summary_line}\n\n"

                    button_text_subject = f"{subject[:35]}{'...' if len(subject) > 35 else ''}"

                    # callback_data: "rcfgidx_<index>"
                    callback_data_str = f"{REPORT_CONFIG_PREFIX}{index}"
                    button = types.InlineKeyboardButton(
                        f"‚öôÔ∏è {button_text_subject}",
                        callback_data=callback_data_str
                    )
                    keyboard.add(button)

                explanation_part = EmailTelegramForwarder.escape_markdown_v2(
                    "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
                response_text += explanation_part

                button_close = types.InlineKeyboardButton(
                    "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data=CLOSE_REPORTS_PREFIX
                )
                keyboard.add(button_close)

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                self.bot.edit_message_text(
                    response_text, chat_id, original_message_id,
                    reply_markup=keyboard, parse_mode='MarkdownV2')

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                with self.lock:
                    self.message_report_context_cache[original_message_id] = list(subjects_with_modes)

                logger.info(f"–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {chat_id}")

            except telebot.apihelper.ApiTelegramException as api_ex:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤: {api_ex}", exc_info=True)
                try:
                    self.bot.send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reports."
                    )
                except Exception:
                    pass

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤: {e}", exc_info=True)
                try:
                    self.bot.send_message(
                        chat_id,
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reports."
                    )
                except Exception:
                    pass

        @self.bot.message_handler(commands=['enable'])
        def handle_enable(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            chat_id = str(message.chat.id)
            if self.update_client_status(chat_id, True):
                self._queue_message(chat_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
            else:
                self._queue_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

        @self.bot.message_handler(commands=['disable'])
        def handle_disable(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            chat_id = str(message.chat.id)
            if self.update_client_status(chat_id, False):
                self._queue_message(chat_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            else:
                self._queue_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

        @self.bot.message_handler(commands=['help'])
        def handle_help(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å (/help)")
            help_message = (
                "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
                "/start \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
                "/status \\- –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n"
                "/reports \\- –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "/enable \\- –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "/disable \\- –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "/help \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"

                "ü™Ñ **–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\\: –ü–æ–ª—É—á–∞–π—Ç–µ —Å—É—Ç—å\\, –∞ –Ω–µ —Å—Ç–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞\\!**\n"
                "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ—Ç—á–µ—Ç—ã –∏ –ø–∏—Å—å–º–∞\\, –≤—ã–¥–µ–ª—è—è –∏–∑ –Ω–∏—Ö —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\\. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏ –µ–º–∫—É—é –≤—ã–∂–∏–º–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ\\, —ç–∫–æ–Ω–æ–º—è –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Å–∏–ª—ã\\.\n\n"
                "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ\\:\n"
                "üîπ –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é\\.\n"
                "üîπ –í—ã–±—Ä–∞—Ç—å\\, –Ω—É–∂–µ–Ω –ª–∏ –≤–∞–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º\\.\n\n"

                "üìé **–§–æ—Ä–º–∞—Ç –î–æ—Å—Ç–∞–≤–∫–∏\\: –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ\\!**\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤\\:\n"
                "üî∏ **–ê–≤—Ç–æ \\(–¢–µ–∫—Å—Ç/PDF\\)\\:** –ë–æ—Ç —Å–∞–º –ø–æ–¥–±–µ—Ä–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\.\n"
                "üî∏ **–¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç\\:** –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\\.\n"
                "üî∏ **–¢–æ–ª—å–∫–æ PDF\\:** –£–¥–æ–±–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\\, –ø–µ—á–∞—Ç–∏ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\\.\n"
                "üî∏ **–¢–æ–ª—å–∫–æ HTML\\:** –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\\.\n\n"

                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\\."
            )
            self._queue_message(str(message.chat.id), help_message, parse_mode='MarkdownV2')

        @self.bot.message_handler(func=lambda message: message.text in ['üìä –°—Ç–∞—Ç—É—Å', 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã',
                                                                        '‚úÖ –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '‚ùå –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                                                        '‚ùì –ü–æ–º–æ—â—å'])
        def handle_menu_buttons(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: '{message.text}' –æ—Ç {message.chat.id}")
            if message.text == 'üìä –°—Ç–∞—Ç—É—Å':
                handle_status(message)
            elif message.text == 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã':
                handle_show_reports(message)
            elif message.text == '‚úÖ –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                handle_enable(message)
            elif message.text == '‚ùå –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                handle_disable(message)
            elif message.text == '‚ùì –ü–æ–º–æ—â—å':
                handle_help(message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_other_messages(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            self._queue_message(str(message.chat.id),
                                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    def _update_user_activity(self, chat_id_any_type) -> None:
        chat_id = str(chat_id_any_type)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        with self.lock:
            self.last_activity[chat_id] = time.time()

    def _handle_command_error(self, message: types.Message, error: Exception) -> None:
        try:
            chat_id = str(message.chat.id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç {chat_id}: {error}", exc_info=True)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _queue_message(self, chat_id: str, text: str, **kwargs) -> None:
        try:
            if self.message_queue.qsize() >= MAX_MESSAGE_QUEUE:
                logger.warning(f"–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id} –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–±—Ä–æ—à–µ–Ω–æ.")
            self.message_queue.put((str(chat_id), text, kwargs), block=False)  # chat_id –∫ —Å—Ç—Ä–æ–∫–µ
        except queue.Full:
            logger.error(f"–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id} –æ—Ç–±—Ä–æ—à–µ–Ω–æ: {text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {chat_id}: {e}")

    def _message_worker(self) -> None:
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        while not self.stop_event.is_set():
            try:
                chat_id, text, kwargs = self.message_queue.get(timeout=1)
                try:
                    self.bot.send_message(chat_id, text, **kwargs)
                except Exception as e:  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å @with_retry —Å—é–¥–∞, –µ—Å–ª–∏ send_message —á–∞—Å—Ç–æ –ø–∞–¥–∞–µ—Ç
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                    # –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
                finally:
                    self.message_queue.task_done()
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ _message_worker: {e}", exc_info=True)
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ
        logger.info("–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _setup_bot_commands(self) -> None:
        try:
            commands = [
                types.BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
                types.BotCommand("status", "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å"),
                types.BotCommand("reports", "üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞"),
                types.BotCommand("enable", "‚úÖ –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                types.BotCommand("disable", "‚ùå –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                types.BotCommand("help", "‚ùì –ü–æ–º–æ—â—å")
            ]

            @with_retry(max_attempts=3, delay=5)
            def set_commands_with_retry():
                self.bot.set_my_commands(commands)

            set_commands_with_retry()
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        except Exception as e:  # –ï—Å–ª–∏ with_retry –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: {e}")

    def _polling_worker(self) -> None:
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API")
        while not self.stop_event.is_set():
            try:
                self.bot.polling(none_stop=True, interval=1, timeout=30)
                if not self.stop_event.is_set():  # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º –ø–æ —Å–µ–±–µ
                    logger.warning("–û–ø—Ä–æ—Å Telegram API –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    time.sleep(RECONNECT_DELAY)
            except telebot.apihelper.ApiTelegramException as api_ex:
                logger.error(f"–û—à–∏–±–∫–∞ API Telegram –≤ –ø–æ—Ç–æ–∫–µ –æ–ø—Ä–æ—Å–∞: {api_ex.error_code} - {api_ex.description}")

                # —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)
                if api_ex.error_code == 409:
                    logger.warning(
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–æ—à–∏–±–∫–∞ 409). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")

                    # –Ø–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º —Å–∏—Å—Ç–µ–º–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                    self.stop_event.set()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ polling

                elif api_ex.error_code == 401 or api_ex.error_code == 403:  # Unauthorized or Forbidden
                    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
                    self.stop_event.set()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                    break

                logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ Telegram API —á–µ—Ä–µ–∑ {RECONNECT_DELAY} —Å–µ–∫—É–Ω–¥...")
                time.sleep(RECONNECT_DELAY)
            except Exception as e:
                if not self.stop_event.is_set():
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–ø—Ä–æ—Å–∞ Telegram API: {e}", exc_info=True)
                    logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ Telegram API —á–µ—Ä–µ–∑ {RECONNECT_DELAY} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(RECONNECT_DELAY)
                else:
                    logger.info("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ —Ñ–ª–∞–≥—É stop_event...")
                    break
        logger.info("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –∑–∞–≤–µ—Ä—à–µ–Ω")

    def start(self) -> None:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            self._setup_bot_commands()
            self.stop_event.clear()
            self.running = True

            self.message_thread = threading.Thread(target=self._message_worker, name="MessageWorkerThread", daemon=True)
            self.message_thread.start()

            self.polling_thread = threading.Thread(target=self._polling_worker, name="PollingThread", daemon=True)
            self.polling_thread.start()

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
            self.stop()  # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ, —á—Ç–æ –º–æ–≥–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            raise

    def stop(self) -> None:
        """–ù–∞–¥–µ–∂–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        if not self.running and self.stop_event.is_set():
            logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        self.stop_event.set()
        self.running = False

        try:
            if hasattr(self.bot, 'stop_polling'):  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.bot.stop_polling()  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å self.bot.polling()
            logger.info("–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

            try:
                if hasattr(self.bot, 'session') and self.bot.session:
                    logger.debug("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
                    self.bot.session.close()
            except Exception as se:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {se}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ bot.stop_polling(): {e}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.polling_thread and self.polling_thread.is_alive():
            logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–ø—Ä–æ—Å–∞...")
            self.polling_thread.join(timeout=RECONNECT_DELAY + 2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self.polling_thread.is_alive():
                logger.warning("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ —Ç–∞–π–º–∞—É—Ç.")

        if self.message_thread and self.message_thread.is_alive():
            logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            self.message_queue.join()  # –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (task_done)
            self.message_thread.join(timeout=5)  # –ó–∞—Ç–µ–º –∂–¥–µ–º —Å–∞–º –ø–æ—Ç–æ–∫
            if self.message_thread.is_alive():
                logger.warning("–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ —Ç–∞–π–º–∞—É—Ç.")

        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–µ—Å–ª–∏ join –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–¥–µ–∞–ª—å–Ω–æ)
        drained_count = 0
        while not self.message_queue.empty():
            try:
                self.message_queue.get_nowait()
                self.message_queue.task_done()
                drained_count += 1
            except queue.Empty:
                break
        if drained_count > 0:
            logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ {drained_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.")

        logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def is_alive(self) -> bool:
        return (self.running and
                self.polling_thread is not None and self.polling_thread.is_alive() and
                self.message_thread is not None and self.message_thread.is_alive())

    def restart(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
        self.stop()

        # 2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        delay_time = RECONNECT_DELAY * 2  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        logger.info(f"–ñ–¥–µ–º {delay_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...")
        time.sleep(delay_time)

        # 3. –í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        gc.collect()

        try:
            # 4. –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∫—ç—à–µ–π
            with self.lock:
                self.message_report_context_cache.clear()
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –∫—ç—à–∏ —Ç–æ–∂–µ –æ—á–∏—â–µ–Ω—ã
                self.client_data = {}
                self.client_data_timestamp = 0
                self.user_states = {}
                self.user_states_timestamp = 0
                self.last_activity = {}

            # 5. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç
            old_bot = self.bot
            self.bot = None
            del old_bot  # –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞

            # 6. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
            self.bot = self._initialize_bot()

            # 7. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö...")
            self.register_handlers()
            self.reload_client_data()

            # 8. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–Ω–æ–≤–æ
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            self.start()

            # 9. –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
            check_delay = 3  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ {check_delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(check_delay)

            if self.is_alive():
                logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
                return True
            else:
                logger.error("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}", exc_info=True)
            return False


def main():
    bot_handler = None
    try:
        bot_handler = EmailBotHandler()
        bot_handler.start()
        while True:
            try:
                time.sleep(60)
                if not bot_handler.is_alive():
                    logger.warning("–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
                    if not bot_handler.restart():
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.")
                        break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ Ctrl+C, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                break
            except Exception as e:  # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
                time.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    except ValueError as ve:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        logger.critical(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {ve}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)
    finally:
        if bot_handler:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞.")
            bot_handler.stop()
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()