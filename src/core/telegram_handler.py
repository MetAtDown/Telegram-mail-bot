import telebot
from telebot import types
import threading
import time
import queue
import functools
from typing import Dict, Any, List, Optional, Set, Callable
from datetime import datetime, timedelta
import logging

from src.config import settings
from src.utils.logger import get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
logger = get_logger("telegram_bot")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
RETRY_DELAY = 2  # —Å–µ–∫—É–Ω–¥—ã
RECONNECT_DELAY = 5  # —Å–µ–∫—É–Ω–¥—ã
MAX_MESSAGE_QUEUE = 100
CACHE_REFRESH_INTERVAL = 300  # —Å–µ–∫—É–Ω–¥—ã (5 –º–∏–Ω—É—Ç)


def with_retry(max_attempts: int = MAX_RETRIES, delay: int = RETRY_DELAY):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_attempts - 1:
                        wait_time = delay * (2 ** attempt)  # Exponential backoff
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): "
                            f"{e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å"
                        )
                        time.sleep(wait_time)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
            raise last_exception

        return wrapper

    return decorator


class EmailBotHandler:
    def __init__(self, db_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤.

        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.telegram_token = settings.TELEGRAM_TOKEN

        if not self.telegram_token:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if db_manager is None:
            from src.db.manager import DatabaseManager
            self.db_manager = DatabaseManager()
        else:
            self.db_manager = db_manager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.lock = threading.RLock()
        self.stop_event = threading.Event()
        self.message_queue = queue.Queue(maxsize=MAX_MESSAGE_QUEUE)
        self.pending_responses = {}

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.client_data = {}
        self.client_data_timestamp = 0

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        self.user_states_timestamp = 0

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.last_activity = {}

        # –§–ª–∞–≥–∏ –∏ –ø–æ—Ç–æ–∫–∏
        self.running = False
        self.polling_thread = None
        self.message_thread = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.bot = self._initialize_bot()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.register_handlers()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        self.reload_client_data()

    def _initialize_bot(self) -> telebot.TeleBot:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

        Returns:
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TeleBot
        """
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ telebot –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            # –£–¥–∞–ª—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä timeout, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            bot = telebot.TeleBot(
                self.telegram_token,
                threaded=True,  # –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
                num_threads=4,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
                parse_mode="Markdown"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )

            logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return bot
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise

    def reload_client_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à
        if (current_time - self.client_data_timestamp) < CACHE_REFRESH_INTERVAL and self.client_data:
            logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö")
            return

        try:
            with self.lock:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
                self.client_data = self.db_manager.get_all_client_data()
                self.client_data_timestamp = current_time

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                self.user_states = self.db_manager.get_all_users()
                self.user_states_timestamp = current_time

                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(self.client_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö: {e}")

            # –ï—Å–ª–∏ –∫—ç—à —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if not self.client_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –∫—ç—à –ø—É—Å—Ç")
                raise
            else:
                logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏–∑ –∫—ç—à–∞")

    @with_retry()
    def update_client_status(self, chat_id: str, status: bool) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (True - –≤–∫–ª—é—á–µ–Ω, False - –æ—Ç–∫–ª—é—á–µ–Ω)

        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False
        """
        try:
            result = self.db_manager.update_user_status(chat_id, status)
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
                with self.lock:
                    self.user_states[chat_id] = status
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è chat_id {chat_id}: {'Enable' if status else 'Disable'}")
                return True
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è chat_id {chat_id}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            # –ü–µ—Ä–µ–ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @with_retry
            raise

    def get_main_menu_keyboard(self) -> types.ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫—ç—à–∏—Ä—É–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏).

        Returns:
            –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if not hasattr(self, '_main_menu_keyboard'):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                btn_status = types.KeyboardButton('üìä –°—Ç–∞—Ç—É—Å')
                btn_reports = types.KeyboardButton('üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã')
                btn_enable = types.KeyboardButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                btn_disable = types.KeyboardButton('‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                btn_help = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
                markup.add(btn_status, btn_reports, btn_enable, btn_disable, btn_help)
                self._main_menu_keyboard = markup

            return self._main_menu_keyboard
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return types.ReplyKeyboardMarkup(resize_keyboard=True)

    def get_status_message(self, chat_id: str, user_name: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if time.time() - self.client_data_timestamp > CACHE_REFRESH_INTERVAL:
                self.reload_client_data()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            subjects = self.db_manager.get_user_subjects(chat_id)
            is_enabled = self.db_manager.get_user_status(chat_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            with self.lock:
                self.user_states[chat_id] = is_enabled

            status = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

            if subjects:
                status_message = (
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                    f"–í–∞—à Chat ID: `{chat_id}`\n\n"
                    f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.\n\n"
                )

                if subjects:
                    status_message += "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:\n"
                    for i, subject in enumerate(subjects, 1):
                        status_message += f"{i}. {subject}\n"
                else:
                    status_message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."
            else:
                status_message = (
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                    f"–í–∞—à Chat ID: `{chat_id}`\n\n"
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n"
                    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

            return status_message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
            return (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                f"–í–∞—à Chat ID: `{chat_id}`\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫

        @self.bot.message_handler(commands=['start'])
        def handle_start(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)
                user_name = message.from_user.first_name

                welcome_message = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
                    f"–í–∞—à Chat ID: `{chat_id}`\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–∏—Å—å–º–∞ –∏–∑ –ø–æ—á—Ç—ã –≤ Telegram –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                self._queue_message(chat_id, welcome_message, reply_markup=self.get_main_menu_keyboard())
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} ({user_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(commands=['status'])
        def handle_status(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)
                user_name = message.from_user.first_name

                status_message = self.get_status_message(chat_id, user_name)
                self._queue_message(chat_id, status_message)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(commands=['reports'])
        def handle_show_reports(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                if time.time() - self.client_data_timestamp > CACHE_REFRESH_INTERVAL:
                    self.reload_client_data()

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                subjects = self.db_manager.get_user_subjects(chat_id)
                is_enabled = self.db_manager.get_user_status(chat_id)

                if subjects:
                    status = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

                    reports_message = (
                        "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:\n\n"
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}\n\n"
                    )

                    for i, subject in enumerate(subjects, 1):
                        reports_message += f"{i}. {subject}\n"

                    self._queue_message(chat_id, reports_message)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤")
                else:
                    self._queue_message(
                        chat_id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n"
                        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /reports: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(commands=['enable'])
        def handle_enable(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                subjects = self.db_manager.get_user_subjects(chat_id)

                if subjects:
                    if self.update_client_status(chat_id, True):
                        self._queue_message(
                            chat_id,
                            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º."
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        self._queue_message(
                            chat_id,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                else:
                    self._queue_message(
                        chat_id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n"
                        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /enable: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(commands=['disable'])
        def handle_disable(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                subjects = self.db_manager.get_user_subjects(chat_id)

                if subjects:
                    if self.update_client_status(chat_id, False):
                        self._queue_message(
                            chat_id,
                            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º."
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        self._queue_message(
                            chat_id,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                else:
                    self._queue_message(
                        chat_id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n"
                        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /disable: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(commands=['help'])
        def handle_help(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                help_message = (
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                    "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                    "/status - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤\n"
                    "/reports - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
                    "/enable - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    "/disable - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                    "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
                )
                self._queue_message(str(message.chat.id), help_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(func=lambda message: message.text in ['üìä –°—Ç–∞—Ç—É—Å', 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã',
                                                                        '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                                                        '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                                                        '‚ùì –ü–æ–º–æ—â—å'])
        def handle_menu_buttons(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)
                user_name = message.from_user.first_name

                if message.text == 'üìä –°—Ç–∞—Ç—É—Å':
                    status_message = self.get_status_message(chat_id, user_name)
                    self._queue_message(chat_id, status_message)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é")

                elif message.text == 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã':
                    handle_show_reports(message)

                elif message.text == '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                    handle_enable(message)

                elif message.text == '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                    handle_disable(message)

                elif message.text == '‚ùì –ü–æ–º–æ—â—å':
                    handle_help(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")
                self._handle_command_error(message, e)

        @self.bot.message_handler(func=lambda message: True)
        def handle_other_messages(message: types.Message) -> None:
            self._update_user_activity(message.chat.id)
            try:
                chat_id = str(message.chat.id)
                self._queue_message(
                    chat_id,
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self._handle_command_error(message, e)

    def _update_user_activity(self, chat_id) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        with self.lock:
            self.last_activity[str(chat_id)] = time.time()

    def _handle_command_error(self, message: types.Message, error: Exception) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥.

        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        """
        try:
            chat_id = str(message.chat.id)
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            try:
                self.bot.send_message(chat_id, error_message)
            except Exception:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _queue_message(self, chat_id: str, text: str, **kwargs) -> None:
        """
        –°—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.

        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å
            if self.message_queue.qsize() >= MAX_MESSAGE_QUEUE:
                logger.warning("–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π")

            self.message_queue.put((chat_id, text, kwargs), block=False)
        except queue.Full:
            logger.error(f"–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id} –æ—Ç–±—Ä–æ—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    def _message_worker(self) -> None:
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    chat_id, text, kwargs = self.message_queue.get(timeout=1)
                except queue.Empty:
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                for attempt in range(MAX_RETRIES):
                    try:
                        self.bot.send_message(chat_id, text, **kwargs)
                        break
                    except Exception as e:
                        if attempt < MAX_RETRIES - 1:
                            wait_time = RETRY_DELAY * (2 ** attempt)
                            logger.warning(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {e}. "
                                f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å"
                            )
                            time.sleep(wait_time)
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {e}")

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.message_queue.task_done()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                time.sleep(1)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _setup_bot_commands(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        try:
            commands = [
                types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                types.BotCommand("status", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤"),
                types.BotCommand("reports", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"),
                types.BotCommand("enable", "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                types.BotCommand("disable", "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
            ]

            for attempt in range(MAX_RETRIES):
                try:
                    self.bot.set_my_commands(commands)
                    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                    break
                except Exception as e:
                    if attempt < MAX_RETRIES - 1:
                        wait_time = RETRY_DELAY * (2 ** attempt)
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {e}. "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å"
                        )
                        time.sleep(wait_time)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")
            # –û—à–∏–±–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

    def _polling_worker(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API")

        while not self.stop_event.is_set():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                self.bot.polling(none_stop=True, interval=1, timeout=30)

                # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,
                # –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                if not self.stop_event.is_set():
                    logger.warning("–û–ø—Ä–æ—Å Telegram API –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    time.sleep(RECONNECT_DELAY)
            except Exception as e:
                if not self.stop_event.is_set():
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–ø—Ä–æ—Å–∞ Telegram API: {e}")
                    logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ Telegram API —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(RECONNECT_DELAY)
                else:
                    logger.info("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...")
                    break

        logger.info("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –∑–∞–≤–µ—Ä—à–µ–Ω")

    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self._setup_bot_commands()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_event.clear()
            self.running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.message_thread = threading.Thread(
                target=self._message_worker,
                name="MessageWorkerThread",
                daemon=True
            )
            self.message_thread.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API
            self.polling_thread = threading.Thread(
                target=self._polling_worker,
                name="PollingThread",
                daemon=True
            )
            self.polling_thread.start()

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            self.stop()
            raise

    def stop(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_event.set()
        self.running = False

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å Telegram API
            self.bot.stop_polling()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            if self.polling_thread and self.polling_thread.is_alive():
                self.polling_thread.join(timeout=5)
                if self.polling_thread.is_alive():
                    logger.warning("–ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ Telegram API –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

            if self.message_thread and self.message_thread.is_alive():
                self.message_thread.join(timeout=5)
                if self.message_thread.is_alive():
                    logger.warning("–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
            while not self.message_queue.empty():
                try:
                    self.message_queue.get_nowait()
                    self.message_queue.task_done()
                except queue.Empty:
                    break

            logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")

    def is_alive(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.

        Returns:
            True –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–Ω–∞—á–µ False
        """
        return (self.running and
                self.polling_thread is not None and
                self.polling_thread.is_alive() and
                self.message_thread is not None and
                self.message_thread.is_alive())

    def restart(self) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤.

        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, –∏–Ω–∞—á–µ False
        """
        logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        self.stop()

        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        time.sleep(3)

        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with self.lock:
                self.client_data = {}
                self.client_data_timestamp = 0
                self.user_states = {}
                self.user_states_timestamp = 0
                self.last_activity = {}

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            self.bot = self._initialize_bot()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–Ω–æ–≤–æ
            self.register_handlers()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
            self.reload_client_data()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.start()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –±–æ—Ç
            for attempt in range(3):
                if self.is_alive():
                    logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                    return True
                time.sleep(1)

            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    bot_handler = None
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_handler = EmailBotHandler()
        bot_handler.start()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        while True:
            try:
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç
                if not bot_handler.is_alive():
                    logger.warning("–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    bot_handler.restart()
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.exception(e)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        if bot_handler:
            try:
                bot_handler.stop()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()